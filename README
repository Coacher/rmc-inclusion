rmc-ig: the project dedicated to construction and plotting inclusion graphs
of certain ideals called basic Reed-Muller codes (see [0]) and radical powers
in a certain group algebra QH where Q is a finite field
with characteristic p and size q = p^l and H is a group isomorphic
to (Q, +) - additive group of field Q.

It is a known fact (see [0]) that in case of prime field
all basic Reed-Muller codes are simply equal to radical powers,
however there are no such equalities in a non-prime field,
except several trivial cases. This program helps to study
the layout of these ideals in a non-prime cases.

This project consists of 3 main parts: librmc, rmc-ig and rmc-short tools and
a number of small useful utilities.

librmc: library providing simple interface for working with M_pi(m,k) ideals,
i.e. basic Reed-Muller codes, like creation, multiplication, substraction as
well as a number of functions to obtain necessary parameters of these ideals
like dimension.

rmc-ig: the most powerful tool which is able to print out all needed info
about M_pi(m,k) ideals and radical powers. It is also able to print
inclusion graphs of Ms/Rads and Rad*Ms/Ms. Therefore it allows to fully
visualize the layout of Ms in QH.

rmc-short: special tool which is dedicated to plotting Ms/Rads inclusion
graph only. However, it doesn't compute ideals directly, but uses
some theoretical results to obtain already transitively reduced inclusion graph.
It is much faster that rmc-ig and plots only needed M_pi(m,k) omitting trivial
inclusion chains.

utils: a number of small utilities which are designed to print out some special
info like collisions between Ms and Rad*Ms or simply printing out Qu_i ideals
which form a given M_pi(m,k). Refer to the source code or short help message
provided by each utility.

Limitations. All ideal indexes and most of the parameters are bounded
by the size of `unsigned long long` type of your machine.
However, this bound is far beyond limits of practical uses of these programs
as with the big number of processed ideals one will get too big and complex
graphs to comprehend.

Requirements. External dependencies are minimal: GMP, CMake and a C compiler.

Building: one can use standart cmake building procedure or call script
tools/build.sh from the project top dir.

[0]: E. Couselo, S. Gonzalez, V. Markov, C. Martinez, A. Nechaev,
    “Ideal representation of Reed-Solomon and Reed-Muller codes”,
    Algebra and Logic, 51, 3 (2012), 195-212.
